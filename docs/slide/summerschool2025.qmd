---
title: "心理ネットワークを用いた<br>シミュレーション研究"
subtitle: "計算論的臨床心理学サマースクール2025"
author: "専修大学大学院文学研究科心理学専攻修士課程2年<br>大水 拓海"
date: 2025.8.7
format: 
  revealjs:
    theme: simple
    css: styles.css  # カスタムCSSファイルを参照
standalone: true
scrollable: true
embed-resources: true
slide-number: true
---



## 自己紹介 {#columns-syntax}

大水拓海(おおみず たくみ)


### 所属

専修大学大学院文学研究科心理学専攻修士課程2年


### 研究テーマ・関心

心理療法の作用機序,感情粒度,心理ネットワーク, <br> シミュレーション,能動的推論



[個人HP](https://psytakumio.github.io/takumiomizu/index.html)



## 心理ネットワークシミュレーション


なぜネットワークからシミュレーションを行うか？

- 実際の臨床データを使用することの困難さ(入手や使用)

- 侵襲性の問題を超えて介入を試す，予測する

- 新たな仮説の生成

# ネットワークシミュレーションの実例


## Cramer et al(2016)


DSM-III-TRに基づく大うつ病の横断データ(8973名)から症状ネットワークを推定

```{r, echo=FALSE}
library(qgraph)
cramer <- read.table("data/Cramer2016_weight.txt", header = TRUE)
qgraph(cramer, layout = "circle", posCol = "blue", color = "lightblue")


```



## Cramer et al (2016)


ネットワークの結合を強めるパラメータ$c$の値が症状全体の活性化を左右する([Cramer et al, 2016](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0167490))

<div style="font-size: 0.5em;">

$$A^{t}_{i} = \sum^{J}_{j=1} cW_{ij}X^{t-1}_j\tag{1}$$

$$P(X^{t}_{i} = 1) = \frac{1}{1+e^{b_{i}}-A^{t}_i} \tag{2}$$

</div>


![](slidefig/cramerfig.jpg)


## Omizu & Kunisato(2025)

![](slidefig/JPR1.png)





## Omizu & Kunisato(2025)

- Cramerのモデルでは症状のみの接続の強さに着目

- 心理療法の介入効果研究データにおいて，症状が改善しても接続が強まっていることが報告([Höller et al, 2022](https://www.mdpi.com/1660-4601/19/12/7131))
<br>
→心理療法などの治療的な要素を入れて拡張することで，ネットワークの中でどの症状を標的にすれば大きな治療効果が得られるかシミュレーションできる
<br>
- 治療的な要素を表す仮想のノードを入れてシミュレーションを行う





## Omizu & Kunisato(2025)：単独症状

![](slidefig/jpr_res.jpg)

## Omizu & Kunisato(2025)：複数症状


![](slidefig/jpr_res2.jpg)

# psynetsim パッケージ

シミュレーションを実際に行ってみる


## psynetsim パッケージ

- ネットワークシミュレーションを実行する関数を<br>パッケージにしてまとめました

- ご自身のRコンソールに以下をコピペして，パッケージをインストールしてください

```{r, echo=TRUE}
remotes::install_github("TakumiOmizu/psynetsim")
library(psynetsim)
```



## psynetsim パッケージ


- **W_init**：第1引数。症状ネットワークの重み。

- **b_init**：第2引数。各ノードの活性化閾値。

- **target**：第3引数。どのノードを標的とするかを選択する。介入するノードは1，介入しないノードは0にする。

上記は必須の引数です。
<br>他にもいろいろオプションがあります。


```{r, echo=TRUE, eval=FALSE}
?simulate_treatment_network
```



## psynetsim パッケージ

仮想データの作成
```{r, echo=TRUE}
# Example data for a 6-symptom network
set.seed(456)
weight_6 <- matrix(rnorm(6*6, mean = 0.2, sd = 0.08), nrow = 6, ncol = 6)
diag(weight_6) <- 0
weight_6[upper.tri(weight_6)] <- t(weight_6)[upper.tri(weight_6)]
print(weight_6)

threshold_6 <- data.frame(threshold = rnorm(6, mean = 0.3, sd = 0.05))
print(threshold_6)

```



## psynetsim パッケージ

ターゲットとノード名の設定
```{r, echo=TRUE}
target_list_6 <- list(symptom1 = 1, symptom2 = 0, symptom3 = 0,
                      symptom4 = 0, symptom5 = 0, symptom6 = 0)
custom_symptom_names_6 <- c("Anxiety", "Sadness", "Fatigue",
                            "Insomnia", "Irritability", "Pain")
```


シミュレーションの実行
```{r, echo=TRUE, eval=FALSE}
# Run the simulation with custom parameters
sim_results <- simulate_treatment_network(
  W_init = weight_6,　#重み
  b_init = threshold_6$threshold,　#閾値
  target = target_list_6,　#ターゲット
  connectivity = 1.2, #全体的な接続の強さ
  edge_between_TC = 1,　#TCノード間の接続の強さ
  weight_bias = 1,　#症状とTCノードの重みの強さ
  TB = 1,　#閾値の値の高さ
  trial = 10, # 繰り返し回数(複数回行って平均を取っている)
  baseline_iteration = 10, # ベースラインのステップ数
  num_TC = 5, # TCノードの数
  TC_iteration_per_component = 10, # 何ステップごとにTCを追加するか
  follow_up_iteration = 10, # TCを全て追加した後のフォローアップ期間
  symptom_name = custom_symptom_names_6
)
```


## psynetsim パッケージ

シミュレーション結果

```{r, echo=FALSE}
# Run the simulation with custom parameters
sim_results <- simulate_treatment_network(
  W_init = weight_6,　#重み
  b_init = threshold_6$threshold,　#閾値
  target = target_list_6,　#ターゲット
  connectivity = 1.2, #全体的な接続の強さ
  edge_between_TC = 1,　#TCノード間の接続の強さ
  weight_bias = 1,　#症状とTCノードの重みの強さ
  TB = 1,　#閾値の値の高さ
  trial = 10, # 繰り返し回数(複数回行って平均を取っている)
  baseline_iteration = 10, # ベースラインのステップ数
  num_TC = 5, # TCノードの数
  TC_iteration_per_component = 10, # 何ステップごとにTCを追加するか
  follow_up_iteration = 10, # TCを全て追加した後のフォローアップ期間
  symptom_name = custom_symptom_names_6
)
```




## ネットワークシミュレーションを試そう！


[Jordan et al(2017)](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0182162#sec015)のオープンデータからPHQ-9を使用



```{r, echo=TRUE}
# Isingのデータを使ってシミュレーションする
library(tidyverse)
library(foreign)
library(bootnet)
library(qgraph)
library(IsingFit)

# データの読み込み
data <- read.spss("pone.0182162.s004.sav", 
                  to.data.frame=TRUE)

# データの整理(PHQ-9に絞って実行)
data_phq <- data %>% 
  mutate(phq9a = S_PHQ9_a, phq9b = S_PHQ9_b, 
         phq9c = S_PHQ9_c, phq9d = S_PHQ9_d, 
         phq9e = S_PHQ9_e, phq9f = S_PHQ9_f, 
         phq9g = S_PHQ9_g, phq9h = S_PHQ9_h, 
         phq9i = S_PHQ9_i) %>% 
  select(phq9a, phq9b, phq9c, phq9d, phq9e, phq9f, phq9g, phq9h, phq9i) %>%
  binarize(split = 1)


```




## Isingモデルによる推定

```{r,echo=TRUE,message=FALSE}

res <- estimateNetwork(data_phq, "IsingSampler")
plot(res)
```
## データの確認

重み
```{r,echo=TRUE}
res$graph
```


閾値
```{r,echo=TRUE}
res$intercepts
```





## シミュレーションの実行

一つ目の症状ノードを標的にした介入

```{r,echo=TRUE,eval=FALSE}


#推定したデータを使ってシミュレーション
simulate_treatment_network(res$graph, 
                           res$intercepts,
                           connectivity = 1.3,
                           target = c(1,0,0,0,0,0,0,0,0),
                           num_TC = 9,
                           edge_between_TC = 2,
                           weight_bias = 1)
```



## シミュレーション結果

```{r,echo=FALSE}


#推定したデータを使ってシミュレーション
simulate_treatment_network(res$graph, 
                           res$intercepts,
                           connectivity = 1.3,
                           target = c(1,0,0,0,0,0,0,0,0),
                           num_TC = 9,
                           edge_between_TC = 1,
                           weight_bias = 1)
```


## ワーク

PHQ-9の症状ネットワークや，関心のあるテーマから推定したネットワークを対象にして，ネットワークシミュレーションを行ってみましょう！

- 単独もしくは複数の症状を標的とした場合，どの症状への介入が最も効果的か？

- 症状を悪化させてしまう組み合わせはあるか？

- その他，どんな条件だとどんなことが起きそうか？


